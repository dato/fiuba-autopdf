#! /bin/bash

set -u

cd "$AUTOPDF_HOME/${1-.}" || exit 1

STAMPFILE=".autopdf_stamp"
TARGETFILE=".autopdf_targets"
BITBUCKET_URL=$(git config --get remote.origin.url |
                sed -r 's#.*(bitbucket.org).(.+)#https://\1/\2/commits#')

OUT=`mktemp`
ERR=`mktemp`
trap "rm -f $OUT $ERR" EXIT

update_one() {
  : >"$OUT"
  : >"$ERR"

  make -k -C "$1" --no-print-directory || prepare_errors "$1" >>"$OUT"

  git ls-files --full-name --ignored --other --exclude='*.pdf' -- "$1" |
  while read local; do
    if [[ $local -ot $STAMPFILE ]]; then
      continue
    fi
    local new=""
    local path="$AUTOPDF_DRIVE_DIR/$local"
    local dir=$(dirname "$path")
    local file=$(basename "$path")

    skicka ls "$path" >/dev/null 2>&1 || new="Nuevo PDF"

    if [[ -n $new ]]; then
      skicka mkdir -p "$dir"
    fi
    local kind="${new:-PDF actualizado}"

    skicka upload "$local" "$path"

    local url=$(skicka -debug ls -ll "$path" 2>/dev/null |
        sed -rn 's#.*id:\s*(\S+).*#https://drive.google.com/file/d/\1/view#p')

    get_details "$local" | jq -n      \
        --arg url "$url"              \
        --arg title "$kind: $file"    \
        --slurpfile fields /dev/stdin ' {
            "title": $title,
            "fallback": $title,
            "fields": $fields,
            "title_link": $url,
            "color": "good"
        }' >>"$OUT"
  done

  if [[ -s $OUT && -n ${AUTOPDF_WEBHOOK_URL-} ]]; then
    jq --arg user "${AUTOPDF_BOT_NAME:-autopdf}"    \
       --arg chan "$2" --slurpfile attach "$OUT" -n ' {
          "channel": $chan,
          "username": $user,
          "attachments": $attach
    }' | curl -sSLd @- "$AUTOPDF_WEBHOOK_URL"
  fi
}

skicka() {
    env HOME="$AUTOPDF_HOME" skicka "$@"
}

get_details() {
  # Primero comprobamos si hay un .md correspondiente
  if git ls-files --error-unmatch -- "${1%.pdf}.md" >/dev/null 2>&1; then
    local path="${1%.pdf}.md"
  else
    # Si no, usamos eliminamos el nombre del archivo para hacer log del
    # directorio. El :// es para el caso en el que el archivo está en el
    # raíz.
    local path="://$1"
    path="${path%/*}"
  fi

  git log -1 -s --format="\
Autor	%aN	true
Revisión	<$BITBUCKET_URL/%H|%h>	true
Log	%s	false" -- "$path" |
    jq -R '[["title", "value", "short"], split("\t")] |
              transpose | map( {(.[0]): .[1]} ) | add'
}

prepare_errors() {
  make -C "$1" >"$ERR" 2>&1

  local error=$(sed '/^ *$/d' <"$ERR" | tail -n 30 |
                jq -R -s '"```" + . + "```"')

  local where=$(sed -rn 's/^make: \*\*\* \[([^]]+).*/Error en \1/p' <"$ERR")

  jq -n --arg title "${where:-Error}" ' {
      "title": $title,
      "fallback": $title,
      "color": "danger",
      "mrkdwn_in": ["text"],
      "text": '"$error"'
    }'
}

main() {
  echo "Script starting at $(date +'%b %d, %H:%M:%S %Z')"

  if [ ! -e "$STAMPFILE" ]; then
    touch "$STAMPFILE"
  fi

  git fetch -q --prune
  git reset -q --hard "@{upstream}"

  if [[ ! -r $TARGETFILE ]]; then
      echo >&2 "'`pwd`/$TARGETFILE' does not exist"
  else
    while read subdir channel; do
      update_one "$subdir" "$channel"
    done <"$TARGETFILE"
  fi

  touch "$STAMPFILE"
  echo "Script finished at $(date +'%b %d, %H:%M:%S %Z')"
}

main
